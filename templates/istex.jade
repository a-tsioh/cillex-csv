doctype html
html
  head
    // Standard Meta
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0')
    // Site Properties

    title cillex-istex

    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/semantic.min.css')

    
    style(type='text/css').

        body, .pusher .ui.segment {
            background: #127777;
        }

                
        #keb {
            min-width:350px;
        }20a9b0cd620a9b0cd6

        #keb .close{
            background: #FFF;
            text-align:right;
            padding: 4px ;
        }
        
        a.ui.active.refresh.button {
            position:absolute;
            right: 56px;
            bottom: 22px;
        }
        
        padagraph-node-search {
            position: absolute;
            bottom: 22px;
        }
        
        .footer.segment {
          padding: 5em 0em;
        }

        @media only screen and (max-width: 700px) {
          .ui.fixed.menu {
            display: none !important;
          }
          .secondary.pointing.menu .item,
          .secondary.pointing.menu .menu {
            display: none;
          }
          .secondary.pointing.menu .toc.item {
            display: block;
          }
        }

        a.inverted { color:white;}

        iframe {
            border: none;
            }

        pre {
            background: darkcyan;
            padding: 6px;
            margin: 0px 30px 10px 0px;
        }

        code.log {
            background: none;
            white-space:pre-wrap;
        }

        form .ui.checkbox label {
            font-size: 24px;
            padding-left: 24px;
            color: white;
        }

        form h3 {
            margin-top: 2px
        }

        input[type=radio] {
            margin:20px;
        }

        #importform.ui.form .field label {
            color:white !important;
        }

        input[type=checkbox], input[type=radio]
        {
          /* Double-sized Checkboxes */
          -ms-transform: scale(2); /* IE */
          -moz-transform: scale(2); /* FF */
          -webkit-transform: scale(2); /* Safari and Chrome */
          -o-transform: scale(2); /* Opera */
          padding: 10px;
        }


        span.bold { font-weight: bold }

        .column.vz { height: 50% !important }
        a.multi {            
            position: absolute !important;
            margin  : 12px;
        }

        #menu {
          position:absolute;
          background: {{color}};
          top: 176px;
        }

        #menu .divider { margin:3px }

        .nofoot #menu {
          top: 24px;
        }

        .ui.icon.menu {
          margin: 12px;
          text-align: right;
          top: 24px;
        }

        #gviz {
            margin:auto;
            margin-bottom:4px;
            
            text-align:left;
            width:100%;
            height:100%;
        }

        #viz {
            height: 100%;
            width: 100%;
        }

        #labels {
          position:absolute;
          bottom: 12px;
          padding:12px;
          margin:18px;
        }
        #labels .segment {
            margin-left: -14px;
            margin-bottom: 24px;
        }

        padagraph-model-popup {
            position:absolute;
            top: 264px;
            right:0px;
            margin:12px;
            max-height: calc(100% - 24px);
            overflow-y: auto;
            z-index:10;
        }

        .nofoot padagraph-model-popup {
            top: 20px;
        }
        
        padagraph-model-popup .propvalue {  color: #333; }
        
  body
    // Page Contents
    #keb.ui.left.vertical.sidebar( style="background:#FAFAFA" )
      a(name="kebup")
      .close
        a.ui.link.icon
          i.close.icon
      #kebcontent
        padagraph-gviz-control
      
      .close
        a.ui.link.icon(href="#kebup")
          i.caret.up.icon
      
    
    .pusher
      .ui.vertical.center.aligned.segment

          script( src="{{static_host}}/static/webcomponents-lite.js" )
          script( data-main="{{static_host}}/static/main" src="{{static_host}}/static/require.js")
          link( rel="import" href="{{static_host}}/static/padagraph-gviz-min.html")

          div#gviz(class="{{ 'nofoot' if not footer else '' }}")
            padagraph-gviz-json( sync="{{sync}}" routes="{{routes}}" data="{{data}}" )

              padagraph-gviz( options="{{options}}")
                div#viz()

                padagraph-model-popup( id="gvizpopup" )

                .ui.icon.borderless.vertical.menu#menu
                      padagraph-collection-filter( mode="node" asitem="asitem")
                      padagraph-collection-filter( mode="edge" asitem="asitem")

                      .ui.divider          
                      padagraph-engine-control( engine="layout" asitem="asitem")
                      padagraph-engine-control( engine="clustering" asitem="asitem")
                      //padagraph-engine-control( engine="explore" asitem="asitem")
                  
                      .ui.divider
                      a.ui.item#keb_settings
                        i.settings.icon

                div#labels
                  padagraph-labels-control

            script.
            
                var _window_resized = function(){
                    var e = document.getElementById('gviz');
                    e.style.height = ( window.innerHeight - 32 )+ "px";
                    var app = document.querySelector('padagraph-gviz').app
                    if ( app.gviz ) app.gviz.resize_rendering();
                }
                
                window.onresize = _window_resized;

                document.querySelector('padagraph-gviz-json').addEventListener('engines-complete', function (e) {

                        console.log(e.detail.app); // true
                        var app = e.detail.app;
          
                        var engines = [];
                        var app_engines = {
                            // commons
                            'search':app.engines.search,
                            'expand':app.engines.expand_prox,
                            //'layout':app.engines.layout,
                            //'clustering':app.engines.clustering,
                            // extra
                            'labels':app.engines.labels,
                            'import':app.engines.import,
                            'export':app.engines.export,
                        };


                        var engine =  app.engines.search;
                        var additiveNodeQuery = new app.Models.AdditiveNodesQuery({graph: app.models.graph })
                        engine.register_input("request", additiveNodeQuery);
                        app.listenTo( Backbone,"engine:search", function(params){                            
                            engine.play();
                        });
                        var merge = function(response, kwargs, state){
                            options = { reset: state.graph[0].options.reset };
                            app.merge_graph(response, options);
                        };
                        app.listenTo(engine, 'play:success', merge );
                        

                        var engine =  app.engines.labels;
                        var cluster_query = new app.Models.ClustersLabelsQuery({ graph: app.models.graph, clustering : app.models.clustering })
                        engine.register_input("request", cluster_query);
                        app.listenTo( Backbone,"engine:labels", function(params){                            
                            engine.play();
                        });
                        app.listenTo(engine, 'play:success', app.clusters_labels );
                        
                        var engine =  app.engines.export;
                        var additiveNodeQuery = new app.Models.AdditiveNodesQuery({graph: app.models.graph })
                        engine.register_input("request", additiveNodeQuery);
                        app.listenTo( Backbone,"engine:export", function(params){                            
                            engine.play();
                        });
                        app.listenTo(engine, 'play:success', app.noop() );
                        
                        engine =  app.engines.import;
                        var additiveNodeQuery = new app.Models.AdditiveNodesQuery({graph: app.models.graph })
                        engine.register_input("request", additiveNodeQuery);
                        app.listenTo( Backbone,"engine:import", function(params){                            
                            engine.play();
                        });
                        app.listenTo(engine, 'play:success', app.explore_reset);
                        
                        for (var k in app_engines){
                            var engine = app_engines[k]
                            engine.name = k;
                            engines.push(engine);
                        }
                        
                        var keb = document.createElement("padagraph-keb")
                        keb.engines = engines;
                        $("#keb")
                            .sidebar('setting', 'dimPage', false)
                            .sidebar('setting', 'transition', 'overlay')
                        $("#kebcontent").append(keb)

                        $("#keb .close i.close.icon").click( ()=>{ $("#keb").sidebar('hide') } )
                        $("#keb_settings").click( ()=>{ $("#keb").sidebar('show') } )

                        _window_resized();
                    })

          padagraph-node-search(actions="add,explore")
          